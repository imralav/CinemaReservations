buildscript {
    ext { springBootVersion = '1.4.2.RELEASE' }
    repositories { mavenCentral() }
    dependencies { classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}") }
}
plugins { id "com.moowork.node" version "1.0.1" }

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'

jar {
    baseName = 'CinemaReservations'
    archiveName = 'cinema.jar'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
    maven { url "https://plugins.gradle.org/m2/" }
}

dependencies {
    compile('org.springframework.boot:spring-boot-starter-data-jpa')
    compile('org.flywaydb:flyway-core')
    compile('org.springframework.boot:spring-boot-starter-thymeleaf')
    compile('org.springframework.boot:spring-boot-starter-web')
    runtime('mysql:mysql-connector-java')
    testCompile('org.springframework.boot:spring-boot-starter-test')
    testCompile('com.github.springtestdbunit:spring-test-dbunit:1.3.0')
    testCompile('org.dbunit:dbunit:2.5.2') {
        exclude module: 'junit'
    }
    testCompile group: 'org.hsqldb', name: 'hsqldb', version: '2.3.4'
}

task cleanPublicFolder(type: Delete) {
    def dirName = project.projectDir.getAbsolutePath() + '/src/main/resources/public'
    file( dirName ).list().each{ f -> delete "${dirName}/${f}" }
}

test {
    testLogging {
        events "PASSED", "STARTED", "FAILED", "SKIPPED"
    }
}

node {
    version = '6.2.0'
    npmVersion = '3.8.9'
    download = true
}

def frontendPath = 'frontend'
def packageJsonPath = frontendPath + '/package.json'
def nodeModulesPath = frontendPath + '/node_modules'
def bowerJsonPath = frontendPath + '/bower.json'
def bowerComponentsPath = frontendPath + '/bower_components'

task npmCacheConfig(type: NpmTask) {
    description = "Configure the NPM cache"
    def npmCacheDir = "${gradle.getGradleUserHomeDir()}/caches/npm"
    outputs.files file(npmCacheDir)
    outputs.upToDateWhen { false }
    args = [ 'config', 'set', 'cache', npmCacheDir ]
}

task npmPackages(type: NpmTask, dependsOn: npmCacheConfig) {
    description = "Install Node.js packages"
    args = [ 'install' ]
    execOverrides {
      it.workingDir = frontendPath
    }
    inputs.files file('package.json')
    outputs.files file('node_modules')
    outputs.upToDateWhen { false }
}

task bowerInstall(type: NodeTask) {
    script = file(nodeModulesPath + '/bower/bin/bower')
    args = ["--config.storage.cache=${gradle.getGradleUserHomeDir()}/caches/bower/cache",
            "--config.storage.packages=${gradle.getGradleUserHomeDir()}/caches/bower/packages",
            "--config.storage.registry=${gradle.getGradleUserHomeDir()}/caches/bower/registry",
            'install']
    execOverrides {
      it.workingDir = frontendPath
    }
    inputs.files file('bower.json')
    outputs.files file('bower_components')
    outputs.upToDateWhen { false }
    dependsOn npmPackages
}

task frontendTest(type: NpmTask) {
    description 'Used to run frontend tests'
    args = ['test']
    execOverrides {
      it.workingDir = frontendPath
    }
    dependsOn bowerInstall
}

task frontendBuild(type: NpmTask) {
    description 'Builds frontend resources'
    args = ['run', 'build']
    execOverrides {
      it.workingDir = frontendPath
    }
    dependsOn frontendTest
}

task frontendCopy(type: NpmTask) {
    description 'Copies frontend resources to public resource dir'
    args = ['run', 'copy'];
    execOverrides {
      it.workingDir = frontendPath
    }
    dependsOn frontendBuild
}

task frontend() {
    dependsOn 'npmCacheConfig'
    dependsOn 'npmPackages'
    dependsOn 'bowerInstall'
    dependsOn 'frontendTest'
    dependsOn 'frontendBuild'
    dependsOn 'frontendCopy'
    description 'Responsible for testing, building and copying frontend resources'
}

processResources.dependsOn frontend
clean.dependsOn cleanPublicFolder
